const express = require("express");
const axios = require("axios");
const fs = require("fs");
const FormData = require("form-data");
const chokidar = require("chokidar");
const path = require("path");
const cors = require("cors");

const app = express();
const port = 8080;

//CONST
const INTERVAL = 5000;
const BYPASS_ANOMALY = true;
const directoryPath = "./drop_area";
const outputPath = "./output/result.csv";

let programSignature = [];
let programAnomaly = [];
let programQueue = [];
let programProcess = [];
let sandboxQueue = [];
let completedQueue = [];
let malware_counter = 0;

const recordCSVInit = () => {
  let writeStreamInit = fs.createWriteStream(outputPath, { flags: "w" });
  writeStreamInit.write("timestamp,job_id,file_name,file_hash,stage,verdict\n");
  writeStreamInit.end();
  //console.log("Record File Initiated");
};

const recordCSV = (data) => {
  //Configure
  let record_data = {
    job_id: data.job_id,
    file_name: data.file_name,
    file_hash: "NULL",
    stage: data.stage,
    verdict: data.verdict,
  };
  let writeStream = fs.createWriteStream(outputPath, { flags: "a" });
  writeStream.write(
    `${new Date()},${record_data.job_id},${record_data.file_name},${
      record_data.file_hash
    },${record_data.stage},${record_data.verdict}\n`
  );
  writeStream.end();
  malware_counter++;
  console.log("Malware Counter: " + malware_counter);
};

const processSignature = () => {
  if (programQueue.length != 0) {
    //console.log("Running Signature");
    let that_file = {
      file_name: programQueue.shift(),
      stage: "SIGNATURE",
      date_created: new Date(),
    };
    let formData = new FormData();
    formData.append(
      "file",
      fs.createReadStream("./drop_area/" + that_file.file_name)
    );
    axios
      .post("http://localhost:5001/check_signature", formData)
      .then((res) => {
        if (res.data.is_malware == false) {
          //console.log("Signature Completed for " + that_file.file_name);
          processAnomaly(that_file);
        } else {
          that_file.verdict = "Malicious (from Signature Detection)";
          that_file.job_id = "N/A";
          that_file.state = "SUCCESS";
          recordCSV(that_file);
          completedQueue.push(that_file);
          //console.log("Signature Malicious for " + that_file.file_name);
        }
      })
      .catch((err) => {
        console.log(
          "Error processing " + that_file.file_name + " at Signature analysis"
        );
        programQueue.push(that_file.file_name);
      });
  }
};

const processAnomaly = (this_file) => {
  //console.log("Running Anomaly");
  if (!BYPASS_ANOMALY) {
    let that_file = this_file;
    that_file.stage = "ANOMALY";
    let formData = new FormData();
    formData.append(
      "file",
      fs.createReadStream("./drop_area/" + that_file.file_name)
    );
    axios
      .post("http://localhost:5001/check_anomaly", formData)
      .then((res) => {
        if (res.data.is_malware_anomaly == "legitimate") {
          //console.log("Anomaly Completed for " + that_file.file_name);
          processSandbox(this_file);
        } else if (res.data.is_malware_anomaly == "malicious") {
          that_file.verdict = "Malicious (from Anomaly Detection)";
          that_file.job_id = "N/A";
          that_file.state = "SUCCESS";
          //console.log("Anomaly Malicious for " + that_file.file_name);
          recordCSV(that_file);
          completedQueue.push(that_file);
        } else {
          that_file.verdict = "Anomaly detection error";
          that_file.job_id = "N/A";
          that_file.state = "ERROR";
          recordCSV(that_file);
          completedQueue.push(that_file);
          //console.log("Anomaly Error for " + that_file.file_name);
        }
      })
      .catch((err) => {
        console.log(
          "Error processing " + that_file.file_name + " at Anomaly analysis"
        );
        that_file.stage = "SIGNATURE";
        programQueue.push(that_file.file_name);
      });
  } else {
    processSandbox(this_file);
  }
};

const processSandbox = (this_file) => {
  //console.log(this_file.file_name + " is sent to sandbox");
  let that_file = this_file;
  that_file.stage = "SANDBOX";
  let formData = new FormData();
  formData.append(
    "file",
    fs.createReadStream("./drop_area/" + that_file.file_name)
  );
  formData.append("environment_id", "160");

  let url = "https://www.hybrid-analysis.com/api/v2/submit/file";
  axios
    .post(url, formData, {
      headers: {
        ...formData.getHeaders(),
        // Add any additional headers if required
        "api-key":
          "j1a9ao95e83eac814426pakt304e8d0e7pspgeya9caf21c690tsj1o1bb350da8",
      },
    })
    .then((res) => {
      res.data.file_name = that_file.file_name;
      res.data.stage = that_file.stage;
      res.data.date_created = that_file.date_created;
      programProcess.push(res.data);
      //console.log("Add new processing data:" + that_file.file_name);
    })
    .catch((err) => {
      if (err.response.status == 429) {
        console.log(
          "Sandbox Requests full. " +
            that_file.fileName +
            " will be in the waiting queue"
        );
        sandboxQueue.push(that_file);
      } else {
        console.log(
          "Error processing " + that_file.file_name + " at Sandbox analysis"
        );
        console.log(err);
        that_file.stage = "ANOMALY";
        programQueue.push(that_file.file_name);
      }
    });
};

const processCheckState = () => {
  if (programProcess.length > 0) {
    let the_job = programProcess.shift();
    let job_id = the_job.job_id;

    let formData = new FormData();

    axios
      .get(
        "https://www.hybrid-analysis.com/api/v2/report/" + job_id + "/state",
        {
          headers: {
            ...formData.getHeaders(),
            // Add any additional headers if required
            "api-key":
              "j1a9ao95e83eac814426pakt304e8d0e7pspgeya9caf21c690tsj1o1bb350da8",
          },
        }
      )
      .then((res) => {
        if (res.data.state == "SUCCESS") {
          axios
            .get(
              "https://www.hybrid-analysis.com/api/v2/report/" +
                job_id +
                "/summary",
              {
                headers: {
                  ...formData.getHeaders(),
                  // Add any additional headers if required
                  "api-key":
                    "j1a9ao95e83eac814426pakt304e8d0e7pspgeya9caf21c690tsj1o1bb350da8",
                },
              }
            )
            .then((resp) => {
              resp.data.file_name = the_job.file_name;
              resp.data.stage = "SANDBOX";
              resp.data.date_created = the_job.date_created;
              completedQueue.push(resp.data);
              recordCSV(resp.data);
            })
            .catch((err) => {
              console.log(
                "Job " +
                  the_job.job_id +
                  " process is completed, but cannot retrieve the summarize report"
              );
              console.log(err);
              programProcess.push(the_job);
            });
        } else if (res.data.state == "ERROR") {
          the_job.state = "ERROR";
          the_job.stage = "SANDBOX";
          the_job.verdict = "Error at Sandbox";
          recordCSV(the_job);
          completedQueue.push(the_job);
        } else {
          programProcess.push(the_job);
        }
      })
      .catch((err) => {
        console.log("Error fetching file state for job " + the_job.job_id);
        programProcess.push(the_job);
      });
  }
};

const watcher = chokidar.watch(directoryPath, { persistent: true });

// Event listener for added files
watcher.on("add", (filePath) => {
  const fileName = path.basename(filePath);
  programQueue.push(fileName);
  console.log(`New file added: ${fileName}`);
});

// Error handling
watcher.on("error", (error) => {
  console.error(`Error: ${error}`);
});

// Ready event when the watcher is ready
watcher.on("ready", () => {
  recordCSVInit();
  // Read the initial list of files in the directory
  fs.readdir(directoryPath, (err, files) => {
    if (err) {
      console.error(`Error reading directory: ${err}`);
      return;
    }

    console.log("Watching for changes...");
    setInterval(processSignature, INTERVAL);
    setInterval(processCheckState, INTERVAL);

    if (programQueue.length == 0) {
      setInterval(processSandbox(sandboxQueue.shift(), 30000));
    }
  });
});

app.use(cors());

// Define a route for handling HTTP requests
app.get("/", (req, res) => {
  res.send("Ping");
});

app.get("/sandbox", (req, res) => {
  res.send(programProcess);
});

app.get("/anomaly", (req, res) => {
  res.send(programAnomaly);
});

app.get("/signature", (req, res) => {
  res.send(programSignature);
});

app.get("/completed", (req, res) => {
  res.send(completedQueue);
});

// Start the Express server
app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});
