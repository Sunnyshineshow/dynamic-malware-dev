const express = require("express");
const axios = require("axios");
const fs = require("fs");
const FormData = require("form-data");
const chokidar = require("chokidar");
const path = require("path");
const cors = require("cors");

const app = express();
const port = 8080;

const directoryPath = "./drop_area";

let programQueue = [];
let programProcess = [];
let completedQueue = [];
let processorStatus = true;

const processInitiate = () => {
  if (processorStatus) {
    if (programQueue.length !== 0) {
      processorStatus = false;
      let that_file = programQueue.shift();
      let formData = new FormData();
      formData.append("file", fs.createReadStream("./drop_area/" + that_file));
      formData.append("environment_id", "160");

      let url = "https://www.hybrid-analysis.com/api/v2/submit/file";
      axios
        .post(url, formData, {
          headers: {
            ...formData.getHeaders(),
            // Add any additional headers if required
            "api-key":
              "j1a9ao95e83eac814426pakt304e8d0e7pspgeya9caf21c690tsj1o1bb350da8",
          },
        })
        .then((res) => {
          res.data.file_name = that_file;
          programProcess.push(res.data);
          console.log("Add new processing data:" + that_file);
          processorStatus = true;
        })
        .catch((err) => {
          console.log("Error occured");
          console.log(err);
        });
    }
  }
};

const processCheckState = () => {
  for (let i = 0; i < programProcess.length; i++) {
    let job_id = programProcess[i].job_id;

    let formData = new FormData();

    axios
      .get(
        "https://www.hybrid-analysis.com/api/v2/report/" + job_id + "/state",
        {
          headers: {
            ...formData.getHeaders(),
            // Add any additional headers if required
            "api-key":
              "j1a9ao95e83eac814426pakt304e8d0e7pspgeya9caf21c690tsj1o1bb350da8",
          },
        }
      )
      .then((res) => {
        if (res.data.state == "SUCCESS") {
          axios
            .get(
              "https://www.hybrid-analysis.com/api/v2/report/" +
                job_id +
                "/summary",
              {
                headers: {
                  ...formData.getHeaders(),
                  // Add any additional headers if required
                  "api-key":
                    "j1a9ao95e83eac814426pakt304e8d0e7pspgeya9caf21c690tsj1o1bb350da8",
                },
              }
            )
            .then((resp) => {
              resp.data.file_name = programProcess[i].file_name;
              completedQueue.push(resp.data);
              programProcess.splice(i, 1);
            });
        } else if (res.data.state == "ERROR") {
          programProcess[i].state = "ERROR";
          completedQueue.push(programProcess[i]);
          programProcess.splice(i, 1);
        }
      });
  }
};

const watcher = chokidar.watch(directoryPath, { persistent: true });

// Event listener for added files
watcher.on("add", (filePath) => {
  const fileName = path.basename(filePath);
  programQueue.push(fileName);
  console.log(`New file added: ${fileName}`);
});

// Error handling
watcher.on("error", (error) => {
  console.error(`Error: ${error}`);
});

// Ready event when the watcher is ready
watcher.on("ready", () => {
  // Read the initial list of files in the directory
  fs.readdir(directoryPath, (err, files) => {
    if (err) {
      console.error(`Error reading directory: ${err}`);
      return;
    }

    console.log("Watching for changes...");
    setInterval(processInitiate, 5000);
    setInterval(processCheckState, 5000);
  });
});

app.use(cors());

// Define a route for handling HTTP requests
app.get("/", (req, res) => {
  res.send(programProcess);
});

app.get("/completed", (req, res) => {
  res.send(completedQueue);
});

// Start the Express server
app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});
